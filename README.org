* Basic SQL Lexer/Parser

This is a very rudimentry sql lexing and parsing logic for use in [[https://github.com/hemanta212/codecrafters-sqlite-go][sqlite toy implementation project]].

Lexing technique is inspired by the [[https://www.youtube.com/watch?v=HxaD_trXwRE][Talk of Rob Pike on Lexing]] on go html/templating std lib

** Examples:

*Create Table*

#+begin_src shell :exports both :results output :wrap example
go run main.go
#+end_src

#+RESULTS:
#+begin_example
Scanning SQL:

	CREATE TABLE oranges
(
       id integer primary key autoincrement,
       name text,
       description text
)


Parsed Stmt:
&{create oranges {oranges [{id [integer primary key autoincrement]} {name [text]} {description [text]}]}}
#+end_example


*Select statement*

#+begin_src shell :exports both :results output :wrap example
go run main.go
#+end_src

#+RESULTS:
#+begin_example
Scanning SQL:
 SELECT name, id from apples

Parsed Stmt:
&{select [name id] [apples] []}
#+end_example


*Select statement with functions*

#+begin_src shell :exports both :results output :wrap example
go run main.go
#+end_src

#+RESULTS:
#+begin_example
Scanning SQL:
 SELECT Count(*) from apples, oranges

Parsed Stmt:
&{select [] [apples oranges] [{count [*]}]}
#+end_example


** Reporting Errors

#+begin_src shell :exports both :results output :wrap example
go run main.go
#+end_src

#+RESULTS:
#+begin_example
Scanning SQL:
 SELECT name, id, from apples, oranges
Parsing error: Unexpected trailing comma near "from" at line 1 pos 17
#+end_example

#+begin_src shell :exports both :results output :wrap example
go run main.go
#+end_src

#+RESULTS:
#+begin_example
Scanning SQL:
 SELECT Count(name id) from apples, oranges
Parsing error: Missing comma between arguments near "id" at line 1 pos 18
#+end_example
